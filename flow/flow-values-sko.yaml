
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

demoMode: false

#images:
#  repository: "547883162893.dkr.ecr.us-east-1.amazonaws.com"
#  tag: "9.2.0"
#  pullPolicy: Always

# The name of the Flow server, usually its fully-qualified domain name, from
# which the server will be available for all agents (resources) and other
# components.
# By default, it is the internal cluster hostname for the K8S Flow server
# service. Flow server will not be fully accessible to non-cluster components
# if this is the default.
serverName: flow-server

#---------------------------------------------
# Ingress configuration section
#---------------------------------------------

ingress:

  enabled: true

  host:

# Flow web ingress annotations, here we use nginx but any other ingress
# supporting sticky sessions will suffice.
  annotations:
    kubernetes.io/ingress.class: "flow-ingress"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
    nginx.ingress.kubernetes.io/proxy-body-size: "10G"
    nginx.ingress.kubernetes.io/secure-backends: "false"

# Certificate for WEB ingress.
#
# Normally should be set when helm install executes using `--set-file
# ingress.certificate.key=path/to/key` `--set-file
# ingress.certificate.crt=path/to/certificate`.
#
# This section is just an example that ingress can be configured with
# certificate for TLS.
  certificate:
    existingSecret:
    key:
    crt:

#---------------------------------------------
# Flow server configuration section
#---------------------------------------------

server:

# Flag that dictates whether this workload and its accompanying services are
# to be installed.
  enabled: true
  imageName: cbflow-server
  replicas: 1

# expose As flow requires repository to be exposed as externally available
# services ingress needs to ports 8443 and 61613  to be open to the
# outer world.
  expose: true

# Master loglevel for com.electriccloud package.
  logLevel: INFO

  zk:
    host: zookeeper
    port: 2181

# This line is interpreted as if passsed to ecconfigure utility within
# the container.
  ecconfigure: "--serverInitMemoryMB=4096 --serverMaxMemoryMB=4096"

  resources:
    limits:
      cpu: 4
      memory: 6Gi
    requests:
      cpu: 1.5
      memory: 6Gi

  nodeSelector: {}
  tolerations: []
  affinity: {}

#---------------------------------------------
# Flow web server configuration section
#---------------------------------------------

web:

# Flag that dictates whether this workload and its accompanying services are
# to be installed.
  enabled: true
  imageName: cbflow-web
  replicas: 1

  service:
    type: ClusterIP

# This line is interpreted as if passsed to ecconfigure utility within
# the container.
  ecconfigure: ""

  resources:
    limits:
      cpu: 1
      memory: 512Mi
    requests:
      cpu: 0.25
      memory: 256Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

#---------------------------------------------
# Flow repository configuration section
#---------------------------------------------

repository:

# Flag that dictates whether this workload and its accompanying services are
# to be installed.
  enabled: true
  imageName: cbflow-repository
  replicas: 1

# expose As flow requires repository to be exposed as externally available
# services ingress needs to ports 8200 to be open to the outer world.
  expose: true

# The zone (must exist in CloudBees Flow server instance) that will be assigned
# to the repository instance created in the Flow server to represent this
# repository instance.
  zoneName:

# The endpoint for Flow repository service.
#
# This setting will be ignored if Flow server is enabled. In this case,
# the service name will be determined automatically based on .serverName value.
#
# If Flow server is disabled and the repository should be connected to
# Flow server outside of this deployment, then this setting is mandatory.
#
# Usual helm templates are acceptable for this setting.
  serviceEndpoint:

# Master loglevel for com.electriccloud package
  logLevel: DEBUG

# This line is interpreted as if passed to ecconfigure utility within
# the container.
  ecconfigure: "--repositoryInitMemoryMB=256 --repositoryMaxMemoryMB=512"

  resources:
    requests:
      cpu: 0.25
      memory: 512Mi
    limits:
      cpu: 0.25
      memory: 1024Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

#---------------------------------------------
# Flow DevOps Insight configuration section
#---------------------------------------------

dois:

# Flag that dictates whether this workload and its accompanying services are
# to be installed.
  enabled: true
  imageName: cbflow-dois
# Number or Elasticsearch nodes
  replicas: 1

# expose As flow requires devopsinsight to be exposed as externally available
# services ingress needs to ports 9200 and 9500 to be open to the outer world.
  expose: true

# The DOIS service endpoint which will be configured on the remote
# CloudBees Flow server.
# Here we assume that the remote CloudBees Flow server is located in the same
# k8s cluster.
  serviceEndpoint: "flow-devopsinsight.{{ .Release.Namespace }}"

# The name of the Elasticsearch cluster.
  esClusterName: elasticsearch.elk
# Minimum number of master-eligible nodes that must be visible in order to
# form an Elasticsearch cluster.
  esMinMasterNodes: 1
# The number of primary shards that an index should have.
  esNumberOfShards:

  credentials:
# Either specify the secret where the report user password and the admin user
# password will be stored (recommended for production) or specify
# the reportUserPassword and adminPassword values.
# When using the secret, store the 'reportUser' password under
# the 'CBF_DOIS_PASSWORD' key and the 'admin' password under
# the 'CBF_DOIS_ADMIN_PASSWORD' key.
# If the password is an empty string, then user 'admin' will not be created
# and administrative access will not be granted.
    existingSecret:
    adminPassword: admin
    reportUserPassword: "changeme"

# The heap size in MB for Elasticsearch and Logstash services.
  esRam: 1024
  lsInitRam: 512
  lsMaxRam: 512

  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 0.1
      memory: 2Gi

  nodeSelector: {}
  tolerations: []
  affinity: {}

#---------------------------------------------
# Flow bound agent configuration section
#---------------------------------------------

# This is an internal component that serves the web server and the repository
# connections to Flow server. It will be automatically enabled or disabled if
# deployment of these components is enabled.

boundAgent:

  imageName: cbflow-agent
  replicas: 1

# Master loglevel for com.electriccloud package.
  logLevel: DEBUG

# This line is interpreted as if passsed to ecconfigure utility within the
# container.
  ecconfigure: "--agentInitMemoryMB=256 --agentMaxMemoryMB=256"

  resources:
    limits:
      cpu: 0.25
      memory: 1024Mi
    requests:
      cpu: 0.25
      memory: 512Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

#---------------------------------------------
# Flow storage configuration section
#---------------------------------------------

storage:

  volumes:

    serverPlugins:
      name: flow-server-shared
      accessMode: ReadWriteMany
# Storage class for plugins directory. Currently it has to be shared across all
# server and web replicas. Has to be ReadWriteMany accessible.
      storageClass: flow-rwm
      storage: 50Gi

    repositoryStorage:
      name: flow-repo-artifacts
      accessMode: ReadWriteOnce
      storage: 20Gi
# In order to use any non "platform-default" or custom storage class just
# state required storageClass name.
      storageClass: ssd

    doisStorage:
      name: elasticsearch-data
      accessMode: ReadWriteOnce
      storage: 10Gi
# In order to use any non "platform-default" or custom storage class just
# state required storageClass name.
      storageClass: ssd

#---------------------------------------------
# Flow server database configuration section
#---------------------------------------------

# Db endpoint, `database` or `schema`, principal that has full privileges on
# that schema (rw access) - dbUser, dbPassword.

database:

#  externalEndpoint: "my.db.somewhere.com"

# Please use this option if your database is residing in the same k8s cluster
# as flow notation is <db-service>.<namespace> If deploying into the same
# namespace `.<namespace>` part can be omitted.

  clusterEndpoint: "mysqlflow.flow"

# Please use this option if you have or are planning to deploy credentials
# secret yourself. The layout has to be the same as that of
# server-secrets.yaml::dbSecret.

#  existingSecret: <my-existing-secret>

  dbName: 'flow'
  dbUser: 'flow-user'
  dbPassword: 'R5CrqMkE4wC3CGJz'

# Remote database port to connect to.
  dbPort: 3306

# database type for flow persistence to work with.
# One of: `mysql` - MYSQL, `mariadb` - MariaDB, `sqlserver` - MSSQLServer,
# `oracle` - Oracle.
  dbType: 'mysql'

#---------------------------------------------
# Flow server credentials configuration section
#---------------------------------------------

flowCredentials:

# Either specify the secret where the admin user password is stored under
# the 'CBF_SERVER_ADMIN_PASSWORD' key (recommended for production) or specify
# the adminPassword.
  existingSecret:
  adminPassword: "changeme"

#---------------------------------------------
# Flow server license configuration optional section
#---------------------------------------------

# Optional section to allow for setting up license with flow server during
# init phase. Allows for either create a secret from this chart or supply
# own pre-created one pre-created secret must have a single field named
# CBF_LICENSE with value containing license file contents.

flowLicense:

# Pass existing secret name with license data here.
  existingSecret:
  licenseData:

#---------------------------------------------
# Network isolation configuration
#---------------------------------------------

networkIsolation:

# `allowFromCidr` defines CIDR which is allowed to make connection to all
# exposed flow endpoints.
  allowFromCidr: "0.0.0.0/0"

#---------------------------------------------
# Zookeeper configuration section
#---------------------------------------------

# Bundled zookeeper installation. If you already have available zookeeper
# installation or your security policy demands so please disable this one and
# enter zookeeper endpoint address into `workloads.server.zk.host` and
# `workloads.server.zk.port`.
# Bear in mind though that flow can not share zookeeper with any other
# applications as of now.
zookeeper:

  enabled: true
  fullnameOverride: zookeeper
  replicaCount: 3

  podLabels:
    ownerApp: "cloudbees-flow"
    role: "cluster-coordinator"
    mode: "private"

  resources:
    limits:
      cpu: "250m"
      memory: "512Mi"
    requests:
      memory: "512Mi"
      cpu: "250m"

#---------------------------------------------
# Flow ingress configuration section
#---------------------------------------------

# As Flow requires server repository and DevOps Insight to be exposed as
# externally available services ingress needs to ports 8200 8443 61613 9200
# and 9500 to be open to outer world. This is not supported as per kubernetes
# ingress specification, though available as a non-standard extension of
# nginx-ingress, which is why we are bundling ingress itself with Flow.

nginx-ingress:

  enabled: true

  controller:
    ingressClass: flow-ingress
# publishService Allows customization of the external service the ingress will
# be bound to via DNS.
    publishService:
      enabled: true

  tcp:
    8200: "{{ .Release.Namespace }}/flow-repository:8200"
    8443: "{{ .Release.Namespace }}/flow-server:8443"
    61613: "{{ .Release.Namespace }}/flow-server:61613"
    9200: "{{ .Release.Namespace }}/flow-devopsinsight:9200"
    9500: "{{ .Release.Namespace }}/flow-devopsinsight:9500"
